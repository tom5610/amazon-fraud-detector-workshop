AWSTemplateFormatVersion: 2010-09-09
Description: IAM Policies, and SageMaker Notebook with Lifecycle configuration for the Semantic Segmentation on Satellite imagery workshop and others in the AIML Workshop series. The template will also clone all the workshop codebases into the Notebook before you get started.

Metadata:
  AWS::CloudFormation::Interface:
    ParameterLabels:
      NotebookName:
        default: Notebook Name

Parameters: 
  NotebookName:
    Type: String
    Default: AIMLWorkshopInstance
    Description: Enter the name of the SageMaker Notebook instance. Default is DeepLearningSatelliteImage.

Resources: 
# SageMaker Execution Role
  SageMakerIamRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: Allow
            Principal:
              Service: sagemaker.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonSageMakerFullAccess"
        - "arn:aws:iam::aws:policy/AmazonS3FullAccess"
        - "arn:aws:iam::aws:policy/IAMFullAccess"
        - "arn:aws:iam::aws:policy/AmazonFraudDetectorFullAccessPolicy"

  FraudDetectorDataAccessRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: Allow
            Principal:
              Service: frauddetector.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonS3FullAccess"
        
  GDALInstanceLifecycleConfig:
    Type: "AWS::SageMaker::NotebookInstanceLifecycleConfig"
    Properties:
      OnStart:
        - Content:           
            Fn::Base64: |
              #!/bin/bash

              set -e

              # OVERVIEW
              # This script installs a custom, persistent installation of conda on the Notebook Instance's EBS volume, and ensures
              # that these custom environments are available as kernels in Jupyter.
              # 
              # The on-start script uses the custom conda environment created in the on-create script and uses the ipykernel package
              # to add that as a kernel in Jupyter.
              #
              # For another example, see:
              # https://docs.aws.amazon.com/sagemaker/latest/dg/nbi-add-external.html#nbi-isolated-environment

              sudo -u ec2-user -i <<'EOF'
              unset SUDO_UID
              WORKING_DIR=/home/ec2-user/SageMaker/custom-miniconda/
              source "$WORKING_DIR/miniconda/bin/activate"
              for env in $WORKING_DIR/miniconda/envs/*; do
                  BASENAME=$(basename "$env")
                  source activate "$BASENAME"
                  # nohup conda install -c conda-forge osmnx "poppler<0.62" -y &
                  python -m ipykernel install --user --name "$BASENAME" --display-name "Custom ($BASENAME)"
              done
              # Optionally, uncomment these lines to disable SageMaker-provided Conda functionality.
              # echo "c.EnvironmentKernelSpecManager.use_conda_directly = False" >> /home/ec2-user/.jupyter/jupyter_notebook_config.py
              # rm /home/ec2-user/.condarc
              EOF

              echo "Restarting the Jupyter server.."
              restart jupyter-server
      OnCreate: 
        - Content: 
            Fn::Base64: |
              #!/bin/bash

              set -e

              # OVERVIEW
              # This script installs a custom, persistent installation of conda on the Notebook Instance's EBS volume, and ensures
              # that these custom environments are available as kernels in Jupyter.
              # 
              # The on-create script downloads and installs a custom conda installation to the EBS volume via Miniconda. Any relevant
              # packages can be installed here.
              #   1. ipykernel is installed to ensure that the custom environment can be used as a Jupyter kernel   
              #   2. Ensure the Notebook Instance has internet connectivity to download the Miniconda installer


              sudo -u ec2-user -i <<'EOF'
              unset SUDO_UID
              # Install a separate conda installation via Miniconda
              WORKING_DIR=/home/ec2-user/SageMaker/custom-miniconda
              mkdir -p "$WORKING_DIR"
              wget https://repo.anaconda.com/miniconda/Miniconda3-4.6.14-Linux-x86_64.sh -O "$WORKING_DIR/miniconda.sh"
              bash "$WORKING_DIR/miniconda.sh" -b -u -p "$WORKING_DIR/miniconda" 
              rm -rf "$WORKING_DIR/miniconda.sh"
              # Create a custom conda environment
              source "$WORKING_DIR/miniconda/bin/activate"
              KERNEL_NAME="gdal_python36"
              PYTHON="3.6"
              conda create --yes --name "$KERNEL_NAME" python="$PYTHON"
              conda activate "$KERNEL_NAME"
              pip install --quiet ipykernel
              # nohup pip install --quiet ipykernel opencv-python sagemaker==1.72.0 boto3 sklearn pillow &
              # nohup aws s3 cp s3://spacenet-dataset/spacenet/SN6_buildings/tarballs/SN6_buildings_AOI_11_Rotterdam_train.tar.gz SageMaker/data/ &
              # nohup tar -C SageMaker/data/ -xzf SageMaker/data/SN6_buildings_AOI_11_Rotterdam_train.tar.gz &
              # nohup rm SageMaker/data/SN6_buildings_AOI_11_Rotterdam_train.tar.gz &
              # Download additional notebook git repos
              git clone https://github.com/tom5610/data-and-notebooks.git SageMaker/fraud-workshop 
              EOF

  # SageMaker notebook
  NotebookInstance:
    Type: "AWS::SageMaker::NotebookInstance"
    Properties:
      InstanceType: "ml.t3.medium"
      NotebookInstanceName: !Ref NotebookName
      RoleArn: !GetAtt SageMakerIamRole.Arn
      LifecycleConfigName: !GetAtt GDALInstanceLifecycleConfig.NotebookInstanceLifecycleConfigName
      VolumeSizeInGB: 500 

Outputs:
  NotebookInstanceId:
    Value: !Ref NotebookInstance
  NotebookInstanceLifecycleConfigId:
    Value: !Ref GDALInstanceLifecycleConfig
  FraudDetectorDataAccessRole:
    Value: !GetAtt "FraudDetectorDataAccessRole.Arn"    